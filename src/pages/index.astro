---
import BaseLayout from '../layouts/BaseLayout.astro';
import WebsiteCard from '../components/WebsiteCard.astro';
import { getWebsites } from '../services/websiteService';

// Initial load - fetch first page
const itemsPerPage = 30;
const { websites, total } = await getWebsites({ 
  sortBy: 'latest',
  limit: itemsPerPage,
  offset: 0
});

// Calculate total pages
const totalPages = Math.ceil(total / itemsPerPage);
---

<BaseLayout title="Gridrr- Curated Website Design Inspo">
  <main class="main-container">
    <header class="header">
      <div class="header-content">
        <a href="/" class="logo-link">
          <div class="logo-wrapper">
            <img src="/logo.png" alt="Gridrr Logo" class="logo" />
          </div>
        </a>
        <nav class="nav-links">
          <a href="/submit" class="nav-link">Submit</a>
          <a href="/categories" class="nav-link">Categories</a>
        </nav>
      </div>
    </header>
    
    <section class="hero">
      <div class="hero-content">
        <h1 class="hero-title">
          <span class="title-line">Curated Website</span>
          <span class="title-line">Design Inspiration</span>
        </h1>
        <p class="hero-tagline">
          <span class="tagline-line">Discover the web's finest designs.</span>
          <span class="tagline-line">Get inspired by handpicked websites from around the world.</span>
        </p>
      </div>
    </section>

    <!-- Filters Section -->
    <div class="filters">
      <div class="filters-scroll">
        <button class="filter-btn active" data-filter="latest">Latest</button>
        <button class="filter-btn" data-filter="popular">Popular</button>
        
        <!-- Categories -->
        <button class="filter-btn" data-filter="saas">SaaS</button>
        <button class="filter-btn" data-filter="web3">Web3</button>
        <button class="filter-btn" data-filter="ai">AI</button>
        <button class="filter-btn" data-filter="ecommerce">E-commerce</button>
        <button class="filter-btn" data-filter="finance">Finance</button>
        <button class="filter-btn" data-filter="healthcare">Healthcare</button>
        
        <!-- Design Styles -->
        <button class="filter-btn" data-filter="minimal">Minimal</button>
        <button class="filter-btn" data-filter="bold">Bold</button>
        <button class="filter-btn" data-filter="dark">Dark</button>
        <button class="filter-btn" data-filter="light">Light</button>
        <button class="filter-btn" data-filter="3d">3D</button>
        <button class="filter-btn" data-filter="gradient">Gradient</button>
        
        <!-- Website Types -->
        <button class="filter-btn" data-filter="landing-page">Landing Page</button>
        <button class="filter-btn" data-filter="web-app">Web App</button>
        <button class="filter-btn" data-filter="portfolio">Portfolio</button>
        <button class="filter-btn" data-filter="agency">Agency</button>
        <button class="filter-btn" data-filter="startup">Startup</button>
        <button class="filter-btn" data-filter="dashboard">Dashboard</button>
      </div>
    <!-- Website Grid -->
    <div class="website-grid" id="website-grid">
      {websites.map((website, index) => (
        <div class="website-card-wrapper" data-index={index}>
          <WebsiteCard 
            {...website}
            key={website.id}
            thumbnailUrl={website.thumbnailUrl || 'https://placehold.co/600x400/1a365d/ffffff?text=No+Preview'}
            muted
          />
        </div>
      ))}
      
      {websites.length === 0 && (
        <div class="no-results">
          <p>No websites found. Check back later for updates!</p>
        </div>
      )}
    </div>
    
    <!-- Load More Button -->
    {websites.length > 0 && websites.length < total && (
      <div class="load-more-container">
        <button id="load-more" class="load-more-btn">Load More</button>
      </div>
    )}
    
    <!-- Initialize hover effects and pagination -->
    <script define:vars={{ websites, total, itemsPerPage: 30 }}>
      // This script runs in the browser
      document.addEventListener('astro:page-load', () => {
        let currentPage = 1;
        const loadMoreBtn = document.getElementById('load-more');
        const websiteGrid = document.getElementById('website-grid');
        let isLoading = false;

        // Initialize hover effects
        function initializeHoverEffects() {
          document.querySelectorAll('.website-card-wrapper').forEach(wrapper => {
            const video = wrapper.querySelector('video');
            if (!video) return;
            
            // Pause video initially
            video.pause();
            
            // Play on hover
            wrapper.addEventListener('mouseenter', () => {
              video.play().catch(e => console.log('Video play failed:', e));
            });
            
            // Pause when not hovering
            wrapper.addEventListener('mouseleave', () => {
              video.pause();
              video.currentTime = 0;
            });
          });
        }

        // Load more websites
        async function loadMoreWebsites() {
          if (isLoading || currentPage * itemsPerPage >= total) return;
          
          isLoading = true;
          loadMoreBtn.disabled = true;
          loadMoreBtn.textContent = 'Loading...';
          
          try {
            const response = await fetch(`/api/websites?page=${currentPage + 1}&limit=${itemsPerPage}`);
            const { websites: newWebsites } = await response.json();
            
            if (newWebsites && newWebsites.length > 0) {
              currentPage++;
              const fragment = document.createDocumentFragment();
              
              newWebsites.forEach((website, index) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'website-card-wrapper';
                wrapper.dataset.index = websiteGrid.children.length + index;
                wrapper.innerHTML = `
                  <website-card 
                    id="${website.id}"
                    name="${website.name.replace(/"/g, '&quot;')}"
                    video-url="${website.videoUrl || ''}"
                    thumbnail-url="${website.thumbnailUrl || ''}"
                    ${website.muted ? 'muted' : ''}
                  ></website-card>
                `;
                fragment.appendChild(wrapper);
              });
              
              websiteGrid.appendChild(fragment);
              initializeHoverEffects();
            }
            
            if ((currentPage * itemsPerPage) >= total) {
              loadMoreBtn.style.display = 'none';
            }
          } catch (error) {
            console.error('Error loading more websites:', error);
          } finally {
            isLoading = false;
            loadMoreBtn.disabled = false;
            loadMoreBtn.textContent = 'Load More';
          }
        }
        
        // Load more on button click
        if (loadMoreBtn) {
          loadMoreBtn.addEventListener('click', loadMoreWebsites);
        }
        
        // Initialize hover effects for initial load
        initializeHoverEffects();
      });
        initializeHoverEffects();
      });
      
    </script>
    
    <script>
      // Scroll-based header behavior
      document.addEventListener('astro:page-load', () => {
        const header = document.querySelector('.header');
        let lastScroll = 0;
        const headerHeight = header.offsetHeight;
        
        // Add scroll event listener
        window.addEventListener('scroll', () => {
          const currentScroll = window.pageYOffset;
          
          // Only apply if scrolled more than 50px
          if (Math.abs(currentScroll - lastScroll) < 50) return;
          
          if (currentScroll > lastScroll && currentScroll > headerHeight) {
            // Scrolling down - hide header
            header.style.transform = 'translateY(-100%)';
          } else {
            // Scrolling up - show header
            header.style.transform = 'translateY(0)';
          }
          
          lastScroll = currentScroll;
        }, { passive: true });
      });
    </script>
  </main>
</BaseLayout>
<style>
      /* Main container */
      .main-container {
        width: 100%;
        max-width: 100%;
        margin: 0;
        padding: 0 2rem;
      }
      
      @media (min-width: 1200px) {
        .main-container {
          max-width: 100%;
          padding: 0 4rem;
        }
      }
      
      /* Hero Section */
      .hero {
        padding: 8rem 0 6rem;
        margin: 0;
        text-align: left;
      }
      
      .hero-content {
        max-width: 1000px;
        margin: 0;
        padding: 0;
      }
      
      .hero-title {
        font-size: 4.5rem;
        font-weight: 800;
        line-height: 1.1;
        margin: 0 0 1rem;
        color: #111827;
        letter-spacing: -0.025em;
      }
      
      .title-line {
        display: block;
      }
      
      .hero-tagline {
        font-size: 1rem;
        line-height: 1;
        color: #4B5563;
        max-width: 700px;
        margin: 0;
        font-weight: 400;
      }
      
      .tagline-line {
        display: block;
        margin-bottom: 0.5rem;
      }
      
      /* Filters Section */
      .filters {
        width: 100%;
        margin: -1.5rem 0 3.5rem;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none; /* Hide scrollbar for Firefox */
        position: relative;
      }
      
      .filters::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 40px;
        background: linear-gradient(90deg, rgba(249,250,251,0) 0%, #F9FAFB 100%);
        pointer-events: none;
      }
      
      .filters::-webkit-scrollbar {
        display: none; /* Hide scrollbar for Chrome/Safari */
      }
      
      .filters-scroll {
        display: flex;
        gap: 2rem;
        padding: 0.5rem 0 1.25rem;
        min-width: max-content;
      }
      
      .filter-btn {
        background: none;
        border: none;
        padding: 0.6rem 0.5rem 1.1rem;
        margin: 0;
        font-family: var(--font-sans, system-ui, -apple-system, sans-serif);
        font-size: 1.05rem;
        font-weight: 600;
        color: #6B7280;
        cursor: pointer;
        position: relative;
        transition: all 0.2s ease;
        white-space: nowrap;
        letter-spacing: 0.01em;
        line-height: 1.25;
      }
      
      .filter-btn:hover {
        color: #111827;
      }
      
      .filter-btn.active {
        color: #111827;
        font-weight: 700;
      }
      
      .filter-btn.active::after {
        content: '';
        display: block;
        width: 6px;
        height: 6px;
        background-color: #3B82F6;
        border-radius: 50%;
        position: absolute;
        left: 0;
        right: 0;
        bottom: 4px;
        margin: 0 auto;
      }
  
  /* Header styles */
  .header {
    z-index: 100;
    --header-padding: 1.5rem 0;
    padding: var(--header-padding);
    background-color: transparent;
  }
  
  .header-content {
    max-width: 100%;
    margin: 0 auto;
    padding: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
  }
  
  @media (max-width: 768px) {
    .header-content {
      padding: 0 1.5rem;
    }
  }
  
  /* Logo styles */
  .logo-wrapper {
    position: relative;
    display: inline-block;
    height: 32px;
  }
  
  .logo {
    height: 100%;
    width: auto;
    transition: transform 0.2s ease;
    position: relative;
  }
  
  .logo::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #3B82F6, #9333EA, #EC4899);
    mix-blend-mode: multiply;
    pointer-events: none;
  }
  
  .logo-link {
    display: flex;
    align-items: center;
    text-decoration: none;
  }
  
  .logo-link:hover .logo {
    transform: scale(1.02);
  }
  
  .logo-link:hover .logo::after {
    opacity: 0.95;
  }
  
  /* Navigation styles */
  .nav-links {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }
  
  .nav-link {
    --text-color: #333;
    --hover-color: #000;
    --transition-speed: 0.2s;
    
    color: var(--text-color);
    font-weight: 500;
    text-decoration: none;
    font-size: 1.1rem;
    position: relative;
    padding: 0.5rem 0;
    transition: color var(--transition-speed) ease;
  }
  
  .nav-link:hover {
    color: var(--hover-color);
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--hover-color);
    transition: width var(--transition-speed) ease;
  }
  
  .nav-link:hover {
    color: var(--hover-color);
  }
  
  .nav-link:hover::after {
    width: 100%;
  }
  
  
  /* No results message */
  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    padding: 4rem 1rem;
    color: #6b7280;
    font-size: 1.1rem;
  }
  
  /* Load more button */
  /* Dropdown styles */
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .dropdown-icon {
    transition: transform 0.2s ease;
  }

  .dropdown:hover .dropdown-icon {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    min-width: 200px;
    background: var(--card-bg);
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 0.5rem 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.2s ease;
    z-index: 1000;
    border: 1px solid var(--border-color);
  }

  .dropdown:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-item {
    display: block;
    padding: 0.75rem 1.25rem;
    color: var(--text-primary);
    text-decoration: none;
    transition: all 0.2s ease;
    font-size: 0.95rem;
  }

  .dropdown-item:hover {
    background: var(--bg-secondary);
    color: var(--primary-color);
  }

  .dropdown-divider {
    height: 1px;
    background: var(--border-color);
    margin: 0.5rem 0;
  }

  .load-more-container {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem 0;
  }
  
  .load-more-btn {
    background: #111827;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .load-more-btn:hover {
    background: #1f2937;
    transform: translateY(-1px);
  }
  
  .load-more-btn:active {
    transform: translateY(0);
  }
  
  .load-more-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  /* Ensure videos don't autoplay on page load */
  video[autoplay] {
    display: none;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 1rem;
    }
    
    .nav-links {
      width: 100%;
      justify-content: center;
      gap: 1.5rem;
    }
    
    .filters {
      margin: -0.5rem 0 2.5rem;
    }
    
    .filters-scroll {
      padding: 0.5rem 1.5rem 1rem;
      gap: 1rem;
    }
    
    .filter-btn {
      font-size: 1rem;
      padding: 0.5rem 0.75rem 0.9rem;
      font-weight: 600;
    }
  }

  .filters {
    position: relative;
    overflow: auto;
    padding: 1rem 0;
    margin: 1rem 0 2rem;
    width: 100%;
    max-width: 100%;
  }
  
  .filters-scroll {
    display: flex;
    gap: 1rem;
    padding: 0.5rem 0 1.25rem;
    min-width: max-content;
    overflow-x: auto;
    scroll-behavior: smooth;
    -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */
    scrollbar-width: none;  /* Hide scrollbar for Firefox */
  }
  
  .filters-scroll::-webkit-scrollbar {
    display: none; /* Hide scrollbar for Chrome, Safari and Opera */
  }
  
  /* Website Grid */
  .website-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    width: 100%;
    max-width: 100%;
    padding: 2rem 0;
  }

  @media (min-width: 768px) {
    .website-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
      padding: 0 2rem 2rem;
    }
  }

  @media (min-width: 1200px) {
    .website-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  }
</style>

